{
    textdomain "cim-browser";

    import "CIM";
    import "SLP";

    import "Wizard";
    import "Label";
    import "HTML";

    string cop = "";

    /**
     * Get directory name
     * @param string path
     * @return  string dirname
     */
    define string dirname (string filePath)
	``{
	   list pathComponents = splitstring(filePath, "/");
	   string last = pathComponents[size(pathComponents) -1]:"";
	   string ret = substring(filePath, 0 , size(filePath) - size(last));
	   return (ret);
    }

    /**
     * Basename
     * @param string path
     * @return string  basename
     */
    define string basename (string filePath)
	``{
	list pathComponents = splitstring(filePath, "/");
	string ret = pathComponents[size(pathComponents) -1 ]: "";
	return ( ret );
    }




    string getDate(string date)
    {
        string year = substring(date, 0 , 4);
        string month = substring(date, 2 , 2);
        string day = substring(date, 4 , 2);
        string hour = substring(date, 6 , 2);
        string min = substring(date, 8 , 2);

        return sformat("%1-%2-%3 %4:%5", year, month, day, hour, min);
    }
    string currCop(string dir)
    {
        string _cop = sformat("/root/cimv2:Novell_LinuxDirectory.Name=\"%1\",CreationClassName=\"Novell_LinuxDirectory\",FSCreationClassName=\"fluff\",FSName=\"fluff\",CSCreationClassName=\"fluff\",CSName=\"fluff\"", dir);
        return _cop;
    }

    include "partitioning/partition_defines.ycp";

    define list<map> fillTree(list<map> res)
    {
        list<map> Tree = [];
        foreach(map srvs,  res, ``{
                Tree =Wizard::AddTreeItem(Tree, "", srvs["pcHost"]:"",
                    srvs["pcHost"]:"");
                });

        return Tree;
    }


    
    string wbem = "service:wbem:http";
    list<map> response = SLP::FindSrvs(wbem, "");
    list treeItems = [];

    term contents =
        `Top(
                `VBox(
                    `Table(`id(`dir),`opt(`notify),
                        `header("", "Name", "Size", "Last Modified"),
                        [] )
                    )
            );


    string title = _("Remote File Browser");
    Wizard::CreateTreeDialog();
    Wizard::SetDesktopIcon("slp");
    list<map> Tree = fillTree(response);
    y2debug("Tree=%1", Tree);
    Wizard::CreateTree(Tree, _("Hosts") );

    string help = dgettext("base", "No help available");
    Wizard::SetContentsButtons(title, contents, help, Label::BackButton(),
            Label::FinishButton());

    Wizard::HideAbortButton();
    Wizard::DisableBackButton();





    map getModes(map inst) 
    {

        map<string,any> cdata = $[];
        cdata["LFName"] = inst["Name", "value"]:"";
        cdata["LFCreationClassName"] = "fluff";
        cdata["FSCreationClassName"] = "fluff";
        cdata["CSCreationClassName"] = "fluff";
        cdata["FSName"] = "fluff";
        cdata["CSName"] = "fluff";

        string _cop = CIM::CreateObjectPath("root/cimv2", 
                "Novell_LinuxFile", cdata);

        map posixFileInst = CIM::GetInstance(_cop);
        //y2debug("instance: %1", inst);
        //y2debug("cop: %1", cop);
        //y2debug("posixFileInst: %1", posixFileInst);

        string modes = "";
        string target = "";
        string CreationClassName = inst["CreationClassName", "value"]:"";
        //y2debug("Name: %1", inst["Name", "value"]:"" );
        if (CreationClassName == "Novell_LinuxSymbolicLink")
        {
            modes = "lrwxrwxrwx";
            target = inst["TargetFile", "value"]:"";
        }
        else
        {
            if (CreationClassName=="Novell_LinuxDirectory")
                modes = "d";
            else
                modes = "-";

            if (posixFileInst["UserReadable","value"]:false)
                modes = modes + "r";
            else 
                modes =modes +  "-";
            if (posixFileInst["UserWritable","value"]:false)
                modes = modes +  "w";
            else  
                modes =modes + "-";
            if (posixFileInst["UserExecutable","value"]:false)
                modes =modes +"x";
            else
                modes =modes +  "-";
            if (posixFileInst["GroupReadable","value"]:false)
                modes =modes + "r";
            else  
                modes =modes +  "-";
            if (posixFileInst["GroupWritable","value"]:false)  
                modes =modes + "w";
            else 
                modes =modes + "-";
            if (posixFileInst["GroupExecutable","value"]:false)
                modes =modes +  "x";
            else 
                modes =modes + "-";
            if (posixFileInst["WorldReadable","value"]:false)
                modes =modes + "r";
            else 
                modes =modes + "-";
            if (posixFileInst["WorldWritable","value"]:false)
                modes =modes + "w";
            else
                modes =modes + "-";
            if (posixFileInst["WorldExecutable","value"]:false)
                modes =modes + "x";
            else
                modes =modes + "-";
                
        }

        return $["modes":modes, "target": target];
    }


    
    list dirItems(string dir)
    {
        list<map> assoc = CIM::Associators(cop, "Novell_LinuxDirectoryContainsFile", "", "GroupComponent", "PartComponent");
        list files = maplist(map inst, assoc, {
                string name = inst["Name", "value"]:"";
                integer fsize = inst["FileSize", "value"]:0;
                string lm = inst["LastModified", "value"]:"";

                string type = "d";
                if (inst["CreationClassName", "value"]:"" == "Novell_LinuxDirectory")
                {
                    type = "d";
                } else {
                    type = "f";
                }
                map m = getModes(inst);
                if (name != nil)
                {
                if (m["target"]:""!="")
                    name = name + "-> " + m["target"]:"";
                return(`item(`id(type + "_" + name), m["modes"]:"", basename(name), fsize, getDate(lm)));
                }
                else
                {
                return(`item(`id(`none), "", "", 0));
                }
                });

        files=prepend(files, `item(`id("up"), "", "..", "", ""));
        return files;
    }



    any input = nil;
    repeat {

        string host = "";
        map event = UI::WaitForEvent();
        input = event["ID"]:nil;
        if (input == `wizardTree)
            input = UI::QueryWidget(`id(`wizardTree), `CurrentItem);

        y2debug("input: %1", input);
        if (is(input, string))
        {
            host = Wizard::QueryTreeItem();
            CIM::Connect(host, "root/cimv2");
            cop = currCop("/root");
            list items = dirItems("/root");
            UI::ChangeWidget(`id(`dir), `Items, items);
        } 
        else if (input == `dir)
        {
            string d = (string)UI::QueryWidget(`id(`dir), `CurrentItem);
            list dd = splitstring(d, "_");
            y2debug("dir: %1", d);
            if (dd[0]:"" == "d")
            {
                cop = currCop(substring(d, 2, size(d)));
                list items = dirItems(substring(d, 2, size(d)));
                UI::ChangeWidget(`id(`dir), `Items, items);
            }
            else if (d == "up")
            {
                list<string> an = CIM::AssociatorNames( cop, "Novell_LinuxDirectoryContainsFile", "Novell_LinuxDirectory", "PartComponent",
                                                        "GroupComponent");
                y2debug("Names: %1", an);
                cop = an[0]:"";
                list items = dirItems("");
                UI::ChangeWidget(`id(`dir), `Items, items);
            }
        }
    } until (input == `next || input == `abort || input == `cancel);

    UI::CloseDialog();
    return input;
    // EOF

}
